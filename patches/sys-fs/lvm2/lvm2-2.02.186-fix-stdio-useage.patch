From f176f0c0a7c7b24c98923ba749acca31e314fb64 Mon Sep 17 00:00:00 2001
From: 
Date: Mon, 8 Apr 2019 18:11:50 -0500
Subject: [PATCH 1/3] fix stdio useage

lvmcmdline.c: In function '_check_standard_fds':
lvmcmdline.c:3113:14: error: assignment of read-only variable 'stdin'
      !(stdin = fopen(_PATH_DEVNULL, "r"))) {
              ^
lvmcmdline.c:3123:15: error: assignment of read-only variable 'stdout'
      !(stdout = fopen(_PATH_DEVNULL, "w"))) {
               ^
lvmcmdline.c:3131:15: error: assignment of read-only variable 'stderr'
      !(stderr = fopen(_PATH_DEVNULL, "w"))) {

---
 lib/commands/toolcontext.c | 4 ++--
 tools/lvmcmdline.c         | 6 +++---
 2 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/lib/commands/toolcontext.c b/lib/commands/toolcontext.c
index 95fb343..5baea40 100644
--- a/lib/commands/toolcontext.c
+++ b/lib/commands/toolcontext.c
@@ -1869,7 +1869,7 @@ struct cmd_context *create_toolcontext(unsigned is_clvmd,
 	/* FIXME Make this configurable? */
 	reset_lvm_errno(1);
 
-#ifndef VALGRIND_POOL
+#if !defined(VALGRIND_POOL) && defined(__GLIBC__)
 	/* Set in/out stream buffering before glibc */
 	if (set_buffering
 #ifdef SYS_gettid
@@ -2274,7 +2274,7 @@ void destroy_toolcontext(struct cmd_context *cmd)
 
 	if (cmd->pending_delete_mem)
 		dm_pool_destroy(cmd->pending_delete_mem);
-#ifndef VALGRIND_POOL
+#if !defined(VALGRIND_POOL) && defined(__GLIBC__)
 	if (cmd->linebuffer) {
 		/* Reset stream buffering to defaults */
 		if (is_valid_fd(STDIN_FILENO) &&
diff --git a/tools/lvmcmdline.c b/tools/lvmcmdline.c
index 0840c65..9503922 100644
--- a/tools/lvmcmdline.c
+++ b/tools/lvmcmdline.c
@@ -3109,7 +3109,7 @@ static int _check_standard_fds(void)
 	int err = is_valid_fd(STDERR_FILENO);
 
 	if (!is_valid_fd(STDIN_FILENO) &&
-	    !(stdin = fopen(_PATH_DEVNULL, "r"))) {
+	    !freopen(_PATH_DEVNULL, "r", stdin)) {
 		if (err)
 			perror("stdin stream open");
 		else
@@ -3119,7 +3119,7 @@ static int _check_standard_fds(void)
 	}
 
 	if (!is_valid_fd(STDOUT_FILENO) &&
-	    !(stdout = fopen(_PATH_DEVNULL, "w"))) {
+	    !freopen(_PATH_DEVNULL, "w", stdout)) {
 		if (err)
 			perror("stdout stream open");
 		/* else no stdout */
@@ -3127,7 +3127,7 @@ static int _check_standard_fds(void)
 	}
 
 	if (!is_valid_fd(STDERR_FILENO) &&
-	    !(stderr = fopen(_PATH_DEVNULL, "w"))) {
+	    !freopen(_PATH_DEVNULL, "w", stderr)) {
 		printf("stderr stream open: %s\n",
 		       strerror(errno));
 		return 0;
-- 
2.23.0

